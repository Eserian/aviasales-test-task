{"version":3,"sources":["components/header/logo.svg","components/header/Header.tsx","components/checkbox/Checkbox.tsx","components/filter/Filter.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Header","className","src","logo","alt","Checkbox","stopType","isChecked","label","onToggle","type","checked","onChange","data-type","labelMap","0","1","2","3","Filter","stops","handleStopsChange","createToggleHandle","e","target","dataset","newStops","isAllChecked","Object","values","every","v","map","value","i","key","App","allTickets","useState","tickets","state","setState","filter","item","stopsFlyForth","segments","stopsFlyBack","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oHAAAA,EAAOC,QAAU,IAA0B,kC,gPCI9BC,G,MAA4B,kBACvC,4BAAQC,UAAU,UAChB,yBAAKC,IAAKC,IAAMC,IAAI,Y,OCIXC,G,YAA8B,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,UAAWC,EAAxB,EAAwBA,MAAOC,EAA/B,EAA+BA,SAA/B,OACzC,yBAAKR,UAAU,YACb,2BAAOA,UAAU,kBACjB,2BACES,KAAK,WACLT,UAAU,iBACVU,QAASJ,EACTK,SAAUH,EACVI,YAAWP,IAEb,0BAAML,UAAU,qBACfO,MCPCM,EAAyB,CAC7BC,EAAG,4EACHC,EAAG,2DACHC,EAAG,2DACHC,EAAG,4DAGQC,EAA0B,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,kBAEzCC,EAAqB,SAACF,EAAoBC,GAArB,OAA0E,SAACE,GACpG,IAAMjB,EAAmBiB,EAAEC,OAAOC,QAAQf,KACpCH,EAAqBgB,EAAEC,OAAOb,QAEpC,GAAiB,QAAbL,EAAJ,CAWA,IAAMoB,EAAqB,eAAQN,GACnCM,EAASpB,GAAYC,EACrBc,EAAkBK,OAblB,CAOEL,EAN8B,CAC5BN,EAAGR,EACHS,EAAGT,EACHU,EAAGV,EACHW,EAAGX,OAWHoB,EAAwBC,OAAOC,OAAOT,GAAOU,OAAM,SAAAC,GAAC,OAAIA,KAE9D,OACE,2BAAO9B,UAAU,gBACf,yBAAKA,UAAU,iBAAf,uHACA,yBAAKA,UAAU,iBACb,kBAAC,EAAD,CACEO,MAAM,qBACNF,SAAU,MACVC,UAAWoB,EACXlB,SAAUa,EAAmBF,EAAOC,KAGpCO,OAAOC,OAAOT,GAAOY,KAAI,SAACC,EAAOC,GAAR,OACvB,kBAAC,EAAD,CACAC,IAAKD,EACL1B,MAAOM,EAASoB,GAChB5B,SAAQ,UAAK4B,GACb3B,UAAW0B,EACXxB,SAAUa,EAAmBF,EAAOC,WCSjCe,MA1Cf,WAEE,IAAMC,EAAuB,GAFhB,EAcaC,mBAVE,CAC1BC,QAAS,GACTnB,MAAO,CACLL,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,KAVM,mBAcNsB,EAdM,KAcCC,EAdD,KA0Bb,OACE,oCACE,kBAAC,EAAD,MACA,0BAAMxC,UAAU,aACd,kBAAC,EAAD,CAAQmB,MAAOoB,EAAMpB,MAAOC,kBAdR,SAACD,GACzB,IAKMmB,EAAUF,EAAWK,QALT,SAACC,GACjB,IAAMC,EAA+BD,EAAKE,SAAS,GAAGzB,MAChD0B,EAA8BH,EAAKE,SAAS,GAAGzB,MACrD,OAAOA,EAAMwB,EAAcG,SAAW3B,EAAM0B,EAAaC,WAG3DN,EAAS,CAAErB,QAAOmB,eAQd,yBAAKtC,UAAU,SACb,yBAAKA,UAAU,SACf,yBAAKA,UAAU,WACb,yBAAKA,UAAU,gBCnDP+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.646e6e60.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.96990a1b.svg\";","import React, { FunctionComponent } from 'react';\nimport logo from './logo.svg';\nimport './header.css';\n\nexport const Header: FunctionComponent = () => (\n  <header className=\"header\">\n    <img src={logo} alt=\"logo\" />\n  </header>\n);\n\n","import React,{ FC, SyntheticEvent } from \"react\";\nimport './checkbox.css';\n\ntype CheckboxProps = {\n  stopType: string\n  label: string\n  isChecked: boolean\n  onToggle: (e: SyntheticEvent) => void\n}\n\nexport const Checkbox: FC<CheckboxProps> = ({ stopType, isChecked, label, onToggle }) => (\n  <div className=\"checkbox\">\n    <label className=\"checkbox-label\">\n    <input\n      type=\"checkbox\"\n      className=\"checkbox-input\"\n      checked={isChecked}\n      onChange={onToggle}\n      data-type={stopType}\n    />\n    <span className=\"checkbox-display\"></span>\n    {label}\n    </label>\n  </div>\n)","import React, { FC }from 'react';\nimport './filter.css';\nimport { Checkbox } from '../checkbox/Checkbox';\nimport { stopsFilter } from '../App'\n\ntype FilterProps = {\n  stops: stopsFilter\n  handleStopsChange: (stops: stopsFilter) => void\n}\n\ntype labelMapType = {\n  [key: number]: string\n}\n\nconst labelMap: labelMapType = {\n  0: \"Без пересадок\",\n  1: \"1 пересадка\",\n  2: \"2 пересадки\",\n  3: \"3 пересадки\"\n}\n\nexport const Filter: FC<FilterProps> = ({ stops, handleStopsChange }) => {\n\n  const createToggleHandle = (stops: stopsFilter, handleStopsChange: (stops: stopsFilter) => void ) => (e: any) => {\n    const stopType: string = e.target.dataset.type;\n    const isChecked: boolean = e.target.checked;\n  \n    if (stopType === 'all') {\n      const newStops: stopsFilter = {\n        0: isChecked,\n        1: isChecked,\n        2: isChecked,\n        3: isChecked,\n      }\n      handleStopsChange(newStops);\n      return;\n    }\n\n    const newStops: stopsFilter = { ...stops };\n    newStops[stopType] = isChecked;\n    handleStopsChange(newStops);\n  };\n\n  const isAllChecked: boolean = Object.values(stops).every(v => v);\n\n  return (\n    <aside className=\"filter col-4\">\n      <div className=\"filter-header\">Количество пересадок</div>\n      <div className=\"checkbox-list\">\n        <Checkbox\n          label=\"Все\"\n          stopType={'all'}\n          isChecked={isAllChecked}\n          onToggle={createToggleHandle(stops, handleStopsChange)}\n        />\n        {\n          Object.values(stops).map((value, i) => (\n            <Checkbox\n            key={i}\n            label={labelMap[i]}\n            stopType={`${i}`}\n            isChecked={value}\n            onToggle={createToggleHandle(stops, handleStopsChange)}\n            />\n          ))\n        }\n      </div>\n    </aside>\n  )\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { Header } from './header/Header'\nimport { Filter } from './filter/Filter'\n\n\ntype fly = {\n  origin: string\n  destination: string\n  date: string\n  stops: Array<string>\n  duration: number\n}\n\ntype ticket = {\n  price: number\n  carrier: string\n  segments: fly[]\n}\n\nexport type stopsFilter = {\n  [key: string]: boolean\n}\n\ntype AppState = {\n  tickets: ticket[]\n  stops: stopsFilter\n}\n\nfunction App() {\n\n  const allTickets: ticket[] = [];\n\n  const initState: AppState = {\n    tickets: [],\n    stops: {\n      0: true,\n      1: true,\n      2: true,\n      3: true,\n    }\n  }\n\n  const [state, setState] = useState(initState);\n\n  const handleStopsChange = (stops: stopsFilter) => {\n    const predicate = (item: ticket) => {\n      const stopsFlyForth: Array<string> = item.segments[0].stops;\n      const stopsFlyBack: Array<string> = item.segments[1].stops;\n      return stops[stopsFlyForth.length] || stops[stopsFlyBack.length];\n    }\n    const tickets = allTickets.filter(predicate);\n    setState({ stops, tickets });\n  };\n\n  return (\n    <>\n      <Header />\n      <main className=\"main-grid\">\n        <Filter stops={state.stops} handleStopsChange={handleStopsChange} />\n        <div className=\"col-8\">\n          <div className=\"tabs\"></div>\n          <div className=\"tickets\">\n            <div className=\"ticket\"></div>\n          </div>\n        </div>\n      </main>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}