{"version":3,"sources":["Components/header/logo.svg","Components/header/Header.tsx","Components/checkbox/Checkbox.tsx","Components/filter/Filter.tsx","Components/sorting/Sorting.tsx","Components/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Header","className","src","logo","alt","Checkbox","stopType","isChecked","label","onChange","type","checked","data-type","Filter","useState","stops","setStops","handleStopsChange","useCallback","e","target","dataset","newStops","isAllFieldsChecked","Object","entries","filter","every","reduce","acc","key","value","map","i","Sorting","sortType","setSortType","leftTabClass","cn","active","rightTabClass","handleClick","sortName","sortname","onClick","data-sortname","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wHAAAA,EAAOC,QAAU,IAA0B,kC,uPCI9BC,G,MAA4B,kBACvC,4BAAQC,UAAU,UAChB,yBAAKC,IAAKC,IAAMC,IAAI,Y,qBCIXC,G,YAA8B,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,UAAWC,EAAxB,EAAwBA,MAAOC,EAA/B,EAA+BA,SAA/B,OACzC,yBAAKR,UAAU,YACb,2BAAOA,UAAU,kBACjB,2BACES,KAAK,WACLT,UAAU,iBACVU,QAASJ,EACTE,SAAUA,EACVG,YAAWN,IAEb,0BAAML,UAAU,qBACfO,MCfQK,EAAa,WAExB,IAF8B,EAUJC,mBARD,CACvB,IAAO,CAAEN,MAAO,qBAAOG,SAAS,GAChC,gBAAiB,CAAEH,MAAO,4EAAiBG,SAAS,GACpD,WAAY,CAAEH,MAAO,2DAAeG,SAAS,GAC7C,YAAa,CAAEH,MAAO,2DAAeG,SAAS,GAC9C,cAAe,CAAEH,MAAO,2DAAeG,SAAS,KAPpB,mBAUvBI,EAVuB,KAUhBC,EAVgB,KAYxBC,EAAoBC,uBAAY,SAACC,GACrC,IAAMb,EAAmBa,EAAEC,OAAOC,QAAQX,KACpCH,EAAqBY,EAAEC,OAAOT,QAEpC,GAAiB,QAAbL,EAAJ,CAKA,IAAMgB,EAAQ,2BAAQP,GAAR,kBAAgBT,EAAhB,2BAAgCS,EAAMT,IAAtC,IAAiDK,QAASJ,MAClEgB,EAA8BC,OAAOC,QAAQH,GAAUI,QAAO,kBAAqB,QAArB,uBAA4BC,OAAM,uCAAMhB,WAC5GW,EAAQ,IAAR,2BAAuBA,EAAQ,KAA/B,IAAwCX,QAASY,IACjDP,EAASM,QAPPN,EAASQ,OAAOC,QAAQV,GAAOa,QAAO,SAACC,EAAD,0BAAOC,EAAP,KAAYC,EAAZ,wBAAC,eAA4BF,GAA7B,kBAAmCC,EAAnC,YAAC,eAA6CC,GAA9C,IAAqDpB,QAASJ,QAAgB,OAQrH,CAACQ,IAEJ,OACE,2BAAOd,UAAU,gBACf,yBAAKA,UAAU,iBAAf,uHACA,yBAAKA,UAAU,iBAEXuB,OAAOC,QAAQV,GAAOiB,KAAI,WAA4BC,GAA5B,uBAAEH,EAAF,YAAStB,EAAT,EAASA,MAAOG,EAAhB,EAAgBA,QAAhB,OACxB,kBAAC,EAAD,CACEmB,IAAKG,EACLzB,MAAOA,EACPF,SAAUwB,EACVvB,UAAWI,EACXF,SAAUQ,U,gBCxCXiB,G,MAAc,WAAO,IAAD,EAECpB,mBAAS,SAFV,mBAExBqB,EAFwB,KAEdC,EAFc,KAIzBC,EAAeC,IAAG,MAAO,WAAY,CACzCC,OAAqB,UAAbJ,IAGJK,EAAgBF,IAAG,MAAO,YAAa,CAC3CC,OAAqB,SAAbJ,IAGJM,EAAcvB,uBAAY,SAACC,GAC/B,IAAMuB,EAAmBvB,EAAEC,OAAOC,QAAQsB,SAC1CP,EAAYM,KACX,IAEH,OACE,yBAAKzC,UAAU,QACb,yBACEA,UAAWoC,EACXO,QAASH,EACTI,gBAAc,SAHhB,6EAKA,yBACE5C,UAAWuC,EACXI,QAASH,EACTI,gBAAc,QAHhB,gFCSSC,EAjBC,WACd,OACE,oCACE,kBAAC,EAAD,MACA,0BAAM7C,UAAU,aACd,kBAAC,EAAD,MACA,yBAAKA,UAAU,SACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,WACb,yBAAKA,UAAU,gBCjBP8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.58a2429a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.96990a1b.svg\";","import React, { FunctionComponent } from 'react';\nimport logo from './logo.svg';\nimport './header.css';\n\nexport const Header: FunctionComponent = () => (\n  <header className=\"header\">\n    <img src={logo} alt=\"logo\" />\n  </header>\n);\n\n","import React,{ FC } from \"react\";\nimport './checkbox.css';\n\ntype CheckboxProps = {\n  stopType: string\n  label: string\n  isChecked: boolean\n  onChange: (e: any) => void\n}\n\nexport const Checkbox: FC<CheckboxProps> = ({ stopType, isChecked, label, onChange }) => (\n  <div className=\"checkbox\">\n    <label className=\"checkbox-label\">\n    <input\n      type=\"checkbox\"\n      className=\"checkbox-input\"\n      checked={isChecked}\n      onChange={onChange}\n      data-type={stopType}\n    />\n    <span className=\"checkbox-display\"></span>\n    {label}\n    </label>\n  </div>\n)","import React, { FC, useState, useCallback }from 'react';\nimport './filter.css';\nimport { Checkbox } from '../checkbox/Checkbox';\n\ntype stops = { [key: string] : { label: string,  checked: boolean }};\n\nexport const Filter: FC = () => {\n\n  const initStops: stops = {\n    'all': { label: 'Все', checked: true },\n    'without stops': { label: 'Без пересадок', checked: true },\n    'one stop': { label: '1 пересадка', checked: true },\n    'two stops': { label: '2 пересадки', checked: true },\n    'three stops': { label: '3 пересадки', checked: true }\n  };\n\n  const [stops, setStops] = useState(initStops);\n\n  const handleStopsChange = useCallback((e: any) => {\n    const stopType: string = e.target.dataset.type;\n    const isChecked: boolean = e.target.checked;\n    \n    if (stopType === 'all') {\n      setStops(Object.entries(stops).reduce((acc, [key, value]) => ({ ...acc, [key]: { ...value, checked: isChecked } }), {}));\n      return;\n    }\n\n    const newStops = { ...stops, [stopType]: { ...stops[stopType], checked: isChecked }}\n    const isAllFieldsChecked: boolean = Object.entries(newStops).filter(([key, ]) => key !== 'all').every(([, { checked }]) => checked);\n    newStops['all'] = { ...newStops['all'], checked: isAllFieldsChecked };\n    setStops(newStops);\n  }, [stops]);\n\n  return (\n    <aside className=\"filter col-4\">\n      <div className=\"filter-header\">Количество пересадок</div>\n      <div className=\"checkbox-list\">\n        {\n          Object.entries(stops).map(([key, { label, checked }], i) => (\n            <Checkbox\n              key={i}\n              label={label}\n              stopType={key}\n              isChecked={checked}\n              onChange={handleStopsChange}\n            />\n          ))\n        }\n      </div>\n    </aside>\n  )\n};\n","import cn from 'classnames'\nimport React, { FC, useState, useCallback }from 'react';\nimport './sorting.css';\n\nexport const Sorting: FC = () => {\n\n  const [sortType, setSortType] = useState('cheap');\n\n  const leftTabClass = cn('tab', 'left-tab', {\n    active: sortType === 'cheap'\n  })\n\n  const rightTabClass = cn('tab', 'right-tab', {\n    active: sortType === 'fast'\n  })\n\n  const handleClick = useCallback((e: any) => {\n    const sortName: string = e.target.dataset.sortname;\n    setSortType(sortName);\n  }, []);\n\n  return (\n    <div className=\"tabs\">\n      <div\n        className={leftTabClass}\n        onClick={handleClick}\n        data-sortname=\"cheap\"\n      >Самый дешевый</div>\n      <div\n        className={rightTabClass}\n        onClick={handleClick}\n        data-sortname=\"fast\"\n      >Самый быстрый</div>\n    </div>\n  )\n}","import React, { FC } from 'react';\nimport './App.css';\nimport { Header } from './header/Header'\nimport { Filter } from './filter/Filter'\nimport { Sorting } from './sorting/Sorting'\n\ntype flight = {\n  origin: string\n  destination: string\n  date: string\n  stops: string[]\n  duration: number\n}\n\ntype ticket = {\n  price: number\n  carrier: string\n  segments: flight[]\n}\n\nconst App: FC = () => {\n  return (\n    <>\n      <Header />\n      <main className=\"main-grid\">\n        <Filter />\n        <div className=\"col-8\">\n          <Sorting />\n          <div className=\"tickets\">\n            <div className=\"ticket\"></div>\n          </div>\n        </div>\n      </main>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}