{"version":3,"sources":["components/header/logo.svg","components/header/Header.tsx","components/checkbox/Checkbox.tsx","components/filter/Filter.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Header","className","src","logo","alt","Checkbox","stopType","isChecked","label","onToggle","type","checked","onChange","data-type","labelMap","0","1","2","3","Filter","stops","handleStopsChange","onToggleHandle","e","target","dataset","newStops","isAllChecked","Object","values","every","v","map","value","i","key","App","allTickets","state","tickets","filter","item","stopsFlyForth","segments","stopsFlyBack","length","setState","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sHAAAA,EAAOC,QAAU,IAA0B,kC,sQCI9BC,G,MAA4B,kBACvC,4BAAQC,UAAU,UAChB,yBAAKC,IAAKC,IAAMC,IAAI,Y,OCIXC,G,YAA6C,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,UAAWC,EAAxB,EAAwBA,MAAOC,EAA/B,EAA+BA,SAA/B,OACtD,yBAAKR,UAAU,YACX,2BAAOA,UAAU,kBACjB,2BACIS,KAAK,WACLT,UAAU,iBACVU,QAASJ,EACTK,SAAUH,EACVI,YAAWP,IAEf,+BACCE,MCPHM,EAAyB,CAC3BC,EAAG,4EACHC,EAAG,2DACHC,EAAG,2DACHC,EAAG,4DAGMC,EAAyC,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,kBAEtDC,EAAiB,SAACF,EAAwBC,GAAzB,OAAkF,SAACE,GACtG,IAAMjB,GAAoBiB,EAAEC,OAAOC,QAAQf,KACrCH,EAAqBgB,EAAEC,OAAOb,QAEpC,IAAkB,IAAdL,EAAJ,CAWA,IAAMoB,EAAyB,eAAQN,GACvCM,EAASpB,GAAYC,EACrBc,EAAkBK,OAblB,CAOIL,EANkC,CAC9BN,EAAGR,EACHS,EAAGT,EACHU,EAAGV,EACHW,EAAGX,OAWToB,EAAwBC,OAAOC,OAAOT,GAAOU,OAAM,SAAAC,GAAC,OAAIA,KAE9D,OACI,2BAAO9B,UAAU,gBACb,yBAAKA,UAAU,iBAAf,uHACA,yBAAKA,UAAU,iBACX,kBAAC,EAAD,CAAUO,MAAM,qBAAMF,UAAW,EAAGC,UAAWoB,EAAclB,SAAUa,EAAeF,EAAOC,KAEzFO,OAAOC,OAAOT,GAAOY,KAAI,SAACC,EAAOC,GAC7B,OAAO,kBAAC,EAAD,CAAUC,IAAKD,EAAG1B,MAAOM,EAASoB,GAAI5B,SAAU4B,EAAG3B,UAAW0B,EAAOxB,SAAUa,EAAeF,EAAOC,WC6BrHe,E,4MAzCbC,WAAgC,G,EAEhCC,MAAQ,CACNC,QAAS,GACTnB,MAAO,CACLL,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,I,EAIPG,kBAAoB,SAACD,GACnB,IAKMmB,EAAU,EAAKF,WAAWG,QALd,SAACC,GACjB,IAAMC,EAA+BD,EAAKE,SAAS,GAAGvB,MAChDwB,EAA8BH,EAAKE,SAAS,GAAGvB,MACrD,OAAOA,EAAMsB,EAAcG,SAAWzB,EAAMwB,EAAaC,WAG3D,EAAKC,SAAS,CAAE1B,QAAOmB,a,uDAIvB,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,MACA,0BAAMtC,UAAU,aACd,kBAAC,EAAD,CAAQmB,MAAO2B,KAAKT,MAAMlB,MAAOC,kBAAmB0B,KAAK1B,oBACzD,yBAAKpB,UAAU,SACb,yBAAKA,UAAU,SACf,yBAAKA,UAAU,WACb,yBAAKA,UAAU,mB,GAjCX+C,aC1BEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.93292d24.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.96990a1b.svg\";","import React, { FunctionComponent } from 'react';\nimport logo from './logo.svg';\nimport './header.css';\n\nexport const Header: FunctionComponent = () => (\n  <header className=\"header\">\n    <img src={logo} alt=\"logo\" />\n  </header>\n);\n\n","import React, { FunctionComponent } from \"react\";\nimport './checkbox.css';\n\ntype CheckboxProps = {\n    stopType: number\n    label: string\n    isChecked: boolean\n    onToggle: any\n}\n\nexport const Checkbox: FunctionComponent<CheckboxProps> = ({ stopType, isChecked, label, onToggle }) => (\n    <div className=\"checkbox\">\n        <label className=\"checkbox-label\">\n        <input\n            type=\"checkbox\"\n            className=\"checkbox-input\"\n            checked={isChecked}\n            onChange={onToggle}\n            data-type={stopType}\n        />\n        <span></span>\n        {label}\n        </label>\n    </div>\n)","import React, { FunctionComponent }from 'react';\nimport './filter.css';\nimport { Checkbox } from '../checkbox/Checkbox';\nimport { stopsFilterType } from '../App'\n\ntype FilterProps = {\n    stops: stopsFilterType\n    handleStopsChange: (stops: stopsFilterType) => void\n}\n\ntype labelMapType = {\n    [key: number]: string\n}\n\nconst labelMap: labelMapType = {\n    0: \"Без пересадок\",\n    1: \"1 пересадка\",\n    2: \"2 пересадки\",\n    3: \"3 пересадки\"\n}\n\nexport const Filter: FunctionComponent<FilterProps> = ({ stops, handleStopsChange }) => {\n\n    const onToggleHandle = (stops: stopsFilterType, handleStopsChange: (stops: stopsFilterType) => void ) => (e: any) => {\n        const stopType: number = +e.target.dataset.type;\n        const isChecked: boolean = e.target.checked;\n        \n        if (stopType === -1) { \n            const newStops: stopsFilterType = {\n                0: isChecked,\n                1: isChecked,\n                2: isChecked,\n                3: isChecked,\n            }\n            handleStopsChange(newStops);\n            return; \n        }\n\n        const newStops: stopsFilterType = { ...stops };\n        newStops[stopType] = isChecked;\n        handleStopsChange(newStops);\n    };\n\n    const isAllChecked: boolean = Object.values(stops).every(v => v);\n\n    return (\n        <aside className=\"filter col-4\">\n            <div className=\"filter-header\">Количество пересадок</div>\n            <div className=\"checkbox-list\">\n                <Checkbox label=\"Все\" stopType={-1} isChecked={isAllChecked} onToggle={onToggleHandle(stops, handleStopsChange)} />\n                {\n                    Object.values(stops).map((value, i) => {\n                        return <Checkbox key={i} label={labelMap[i]} stopType={i} isChecked={value} onToggle={onToggleHandle(stops, handleStopsChange)} />\n                    })\n                }\n            </div>\n        </aside>\n    )\n};\n","import React, { Fragment, Component } from 'react';\nimport './App.css';\nimport { Header } from './header/Header'\nimport { Filter } from './filter/Filter'\n\n\ntype flyType = {\n    // Код города (iata)\n    origin: string\n    // Код города (iata)\n    destination: string\n    // Дата и время вылета туда\n    date: string\n    // Массив кодов (iata) городов с пересадками\n    stops: Array<string>\n    // Общее время перелёта в минутах\n    duration: number\n}\n\ntype ticketType = {\n  // Цена в рублях\n  price: number\n  // Код авиакомпании (iata)\n  carrier: string\n  // Массив перелётов.\n  // В тестовом задании это всегда поиск \"туда-обратно\" значит состоит из двух элементов\n  segments: Array<flyType>\n}\n\nexport type stopsFilterType = {\n  [key: number]: boolean\n}\n\ntype AppStateType = {\n  tickets: Array<ticketType>\n  stops: stopsFilterType\n}\n\nclass App extends Component<{}, AppStateType> {\n\n  allTickets: Array<ticketType> = [];\n\n  state = {\n    tickets: [],\n    stops: {\n      0: true,\n      1: true,\n      2: true,\n      3: true,\n    }\n  }\n\n  handleStopsChange = (stops: stopsFilterType) => {\n    const predicate = (item: ticketType) => {\n      const stopsFlyForth: Array<string> = item.segments[0].stops;\n      const stopsFlyBack: Array<string> = item.segments[1].stops;\n      return stops[stopsFlyForth.length] || stops[stopsFlyBack.length];\n    }\n    const tickets = this.allTickets.filter(predicate);\n    this.setState({ stops, tickets });\n  };\n  \n  render () {\n    return (\n      <Fragment>\n        <Header />\n        <main className=\"main-grid\">\n          <Filter stops={this.state.stops} handleStopsChange={this.handleStopsChange} />\n          <div className=\"col-8\">\n            <div className=\"tabs\"></div>\n            <div className=\"tickets\">\n              <div className=\"ticket\"></div>\n            </div>\n          </div>\n        </main>\n      </Fragment>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}